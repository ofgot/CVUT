import random

class Dealer:
    def __init__(self):
      self.deck = [
        '♥A', '♥7', '♥8', '♥9', '♥10', '♥J', '♥Q', '♥K',
        '♦A', '♦7', '♦8', '♦9', '♦10', '♦J', '♦Q', '♦K',
        '♣A', '♣7', '♣8', '♣9', '♣10', '♣J', '♣Q', '♣K',
        '♠A', '♠7', '♠8', '♠9', '♠10', '♠J', '♠Q', '♠K',
      ]

      self.players = []


    def shuffle(self):
        # deck = self.deck.copy()
        random.shuffle(self.deck)
        # return deck


    def deal(self, n):
        arm = []
        deck = self.deck
        # print(deck)
        if len(deck) == 0:
            return []
        else:
            for num in range(n):
                if len(deck) == 0:
                    break
                num = deck.pop(0)
                arm.append(num)
        return arm


    def addPlayer(self, player):
        self.players.append(player)


    def removePlayer(self, player):
        self.players.remove(player)


    def startRound(self):
        players = self.players.copy()
        while len(players) != 0:
            delete = []
            print('--- rozdavam  ---')
            for player in players:
                if len(player.hand) == 0:
                    card = self.deal(1)
                    player.hand += card
                    print(player.name, ' ma nyni karty ', player.hand, ' v hodnote ', player.getHandValue())
                else:
                    res = player.needsCard()
                    if res == True:
                        card_new = self.deal(1)
                        player.hand += card_new
                        if player.getHandValue() > 21:
                            delete.append(player)
                        print(player.name, ' ma nyni karty ', player.hand, ' v hodnote ', player.getHandValue())
                    else:
                        delete.append(player)
                        if len(players) == 1:
                            print('---', player.name, ' nechce ---')

            for i in delete:
                players.remove(i)
        print('--- kolo skoncilo ---')
        print(self.announceWinner())


    def announceWinner(self):
        winner = 0
        for i in self.players:
            print(i.name, str(i.getHandValue()))



class Player:
    def __init__(self, name, strategy):
        self.name = name
        self.strategy = strategy
        self.hand = []

    def getHandValue(self):
        points = 0
        for card in self.hand:
            if card[1] == 'J' or card[1] == 'K' or card[1] == 'Q':
                points += 1
            elif card[1] == '7':
                points += 7
            elif card[1] == '8':
                points += 8
            elif card[1] == '9':
                points += 9
            elif card[1] == '1':
                points += 10
            elif card[1] == 'A':
                points += 11
        return points


    def acceptCard(self, cards):
        self.hand += cards
        print(self.hand)


    def needsCard(self):
        if self.strategy == 'Cautious':
            if self.getHandValue() >= 10:
                return False
            else:
                return True
        elif self.strategy == 'Bold':
            if self.getHandValue() >= 15:
                return False
            else:
                return True
        elif self.strategy == 'Human':
            res = input(self.name + ' ma nyni karty: ' + str(self.hand) + ' v hodnote ' +
                  str(self.getHandValue()) + ', chce dalsi(A/N)?: ')
            if res == 'A':
                return True
            elif res == 'N':
                return False



# TEST DEAL

# dealer = Dealer()
# dealer.shuffle()
# myHand = dealer.deal(31)
# print(myHand)
# dealer.shuffle()
# myHand = dealer.deal(3)
# print(myHand)


# TEST GAME
newDealer = Dealer()
player1 = Player('Čeněk Člověčí', 'Human')
player2 = Player('Vilda Vopatrný', 'Cautious')
player3 = Player('Olda Odvážný', 'Bold')
player4 = Player('Ofgot', 'Cautious')
newDealer.addPlayer(player1)
newDealer.addPlayer(player2)
newDealer.addPlayer(player3)
newDealer.addPlayer(player4)
newDealer.shuffle()
newDealer.startRound()

